"""
Django settings for Single Sign On Portal (ssop) project.

Generated by 'django-admin startproject' using Django 3.2.15.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import base64
import os
import sys
import datetime
import json
import pydot
import pyparsing

from pathlib import Path
from django.utils.safestring import mark_safe
from django.core.exceptions import ImproperlyConfigured

# (new in Django 3.2)
#
# Either add this into settings.py
DEFAULT_AUTO_FIELD='django.db.models.AutoField'
# ... or
#
# class Topic(models.Model):
#     id = models.AutoField(primary_key=True)
#     ...

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# https://stackoverflow.com/questions/42077532/django-security-and-settings
with open(os.path.join(BASE_DIR, 'secrets.json')) as secrets_file:
    jsonsecrets = json.load(secrets_file)

def get_secret(key):
    """Get secret setting or fail with ImproperlyConfigured"""
    try:
        return jsonsecrets[key]
    except KeyError:
        print("ImproperlyConfigured -- Missing value for key {}".format(key))
        raise ImproperlyConfigured("Missing value for key {}".format(key))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_secret('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
VERBOSE = False

# Expire the session after an hour
SESSION_COOKIE_AGE = 3600
LOGOUT_EXPIRY = 1
CSRF_COOKIE_SECURE = False
SESSION_COOKIE_SECURE = False

# https://stackoverflow.com/questions/8023126/how-can-i-test-https-connections-with-django-as-easily-as-i-can-non-https-conne1826
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

if DEBUG:
    SESSION_COOKIE_AGE = 10 * SESSION_COOKIE_AGE
else:
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True

# tailored from https://www.webforefront.com/django/setupdjangologging.html
# unfortunately, cannot use a variable to enforce DRY for basepath
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'simple': {
            'format': '[%(asctime)s] %(levelname)s %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'verbose': {
            'format': '[%(asctime)s] %(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'development_logfile': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.FileHandler',
            'filename': '/home/gslauth/logs/ssop_dev.log',
            'formatter': 'verbose'
        },
        'info_logfile': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': '/home/gslauth/logs/ssop_info.log',
            'formatter': 'verbose'
        },
        'production_logfile': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '/home/gslauth/logs/ssop_production.log',
            'maxBytes': 1024 * 1024 * 1024 * 100,  # 100GB
            'backupCount': 5,
            'formatter': 'simple'
        },
    },
    'root': {
        'level': 'DEBUG',
        'handlers': ['console'],
    },
    'loggers': {
        'django': {
            'handlers': ['development_logfile', 'production_logfile'],
        },
        'django.request': {
            'handlers': ['development_logfile', 'production_logfile'],
        },
        'django.server': {
            'handlers': ['development_logfile', 'production_logfile'],
        },
        'ssop': {
            'handlers': ['development_logfile', 'info_logfile', 'production_logfile'],
        },
        'py.warnings': {
            'handlers': ['development_logfile'],
        },
    }
}


HTTP_PROXY = "http://rhsm-proxy.gsd.esrl.noaa.gov:3128"


# https://pypi.org/project/django-auth-oidc/
AUTH_SERVER = get_secret('AUTH_SERVER')
AUTH_CLIENT_ID = get_secret('AUTH_CLIENT_ID')
AUTH_CLIENT_SECRET = get_secret('AUTH_CLIENT_SECRET')

# https://developers.login.gov/attributes/
AUTH_SCOPE = ["uuid", "profile:name", "given_name", "family_name"]

# Application definition

# for creating object mapping using django-extensions
GRAPH_MODELS = {
  'all_applications': True,
  'group_models': True,
}

GRAPH_MODELS = {
  'app_labels': ["sites"],
}

INSTALLED_APPS = [
    'sites',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ssop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'ssop.context_processors.deploy_env',
                'ssop.context_processors.server_url',
            ],
        },
    },
]

WSGI_APPLICATION = 'ssop.wsgi.application'
SSOP_DEPLOY_ENV = 'Development'

if SSOP_DEPLOY_ENV == "Development":
    DEPLOY_ENV_COLOR = '#ff6666'  # light red
    DEPLOY_ENV_TEXT_COLOR = 'gold'
    DEBUG = True
    SERVER_FQDN = 'gsl-webstage8.gsd.esrl.noaa.gov'
    SERVER_IP = '137.75.133.86'

elif SSOP_DEPLOY_ENV == "Integration":
    DEPLOY_ENV_COLOR = '#99ff99'  # light green
    DEPLOY_ENV_TEXT_COLOR = 'black'
    SERVER_FQDN = '?.gsd.esrl.noaa.gov'
    SERVER_IP = '137.75.164.y'

elif SSOP_DEPLOY_ENV == "Production":
    DEPLOY_ENV_COLOR = "#3399ff"  # blue
    DEPLOY_ENV_TEXT_COLOR = 'gold'
    SERVER_FQDN = '?.gsd.esrl.noaa.gov'
    SERVER_IP = '137.75.164.x'

else:
    msg = "environment variable QRBA3_DEPLOY_ENVIRONMENT not set.  " \
          "Supported values: Development, Integration, Production"
    print(msg)
    sys.exit(-1)

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'gsl.noaa.gov', '140.172.12.92', SERVER_FQDN, SERVER_IP]

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
DATABASENAME = BASE_DIR + '/ssop/db.sqlite3'
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': DATABASENAME,
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '/usr/share/nginx/html/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# https://developers.login.gov/oidc/
LOGINDOTGOV_IDP_SERVER = 'https://idp.int.identitysandbox.gov'
LOGINDOTGOV_CLIENT_ID = 'urn:gov:gsa:openidconnect.profiles:sp:sso:noaa_oar:ssop'

# Basic identity assurance, does not require identity verification (this is the most common value).
LOGINDOTGOV_ACR = 'http://idmanagement.gov/ns/assurance/ial/2'
LOGINDOTGOV_CLIENT_ASSERTION_TYPE = 'urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-bearer'
LOGINDOTGOV_SCOPE = 'openid+email+profile+first_name+last_name'
LOGINDOTGOV_RETURN_TO = 'https://gsl.noaa.gov/ssop/ldg_authenticated'
LOGINDOTGOV_AUTHENTICATED_REDIRECT = 'https://gsl.noaa.gov/ssop/static/test.html'
LOGINDOTGOV_AUTHENTICATED_REDIRECT2 = 'https://gsl.noaa.gov/ssop/static/test2.html'
LOGINDOTGOV_ERROR_REDIRECT = 'https://gsl.noaa.gov/ssop/oops'
LOGINDOTGOV_LOGOUT_URI = 'https://gsl.noaa.gov/ssop/sites'

# A known parameter return on auth sucess .... can be whatever we want as long as its > 22 chars
LOGINDOTGOV_LOGIN_STATE = '2.7182818284590452353602874'
LOGINDOTGOV_LOGOUT_STATE = '1.618033988749894848204586'
with open(os.path.join(BASE_DIR, 'logindotgov/certs/private.pem')) as privcert:
    LOGINDOTGOV_PRIVATE_CERT = privcert.read()

# JWT verification -- using GSL's LetsEncrypt certs
JWT_BASE_DIR = '/etc/pki/tls/private/gsl-webstage8.gsd.esrl.noaa.gov.'
certfile = JWT_BASE_DIR + 'pem'
keyfile = JWT_BASE_DIR + 'privkey'
with open(certfile) as pubcert:
    JWT_PUBLIC_CERT = pubcert.read()
    JWT_PUBLIC_CERT_B64 = str(base64.b64encode(JWT_PUBLIC_CERT.encode()))
with open(keyfile) as privkey:
    JWT_PRIVATE_KEY = privkey.read()
    JWT_PRIVATE_KEY_B64 = str(base64.b64encode(JWT_PRIVATE_KEY.encode()))

# safe token length
JWTSAFELEN = 30

# JWT expiration time in seconds -- will be added to current UTC
JWTEXP = 3600

# Attributes one-time access token lifetime in seconds
ATTRS_ACCESS_TOKEN_LIFETIME = 600
DATA_AT_REST_KEY_ATTRS = get_secret('DATA_AT_REST_KEY_ATTRS')

# for graphing
NODE_TYPE_CHOICES = ['AllConnections', 'Attribute', 'AttributeGroup', 'Browser', 'Organization', 'Project', 'Uniqueuser', 'Conngroup', 'Namegroup']
# If true, [nodenumber] will we prepended to each node label
LABELNODES = False

HELP_NAME = "A simple, urlsafe (no spaces or special characters) name for this project and its login url."
HELP_VERBOSE_NAME = "A longer name which does not have to be urlsafe (no spaces or special characters) for this project used for login urls.  It will be set to the project name if 'newproject' remains in the field."
HELP_RETURN_TO = "The URL to which authenticated users will be sent.  An authentication token string will be appended to the url using a ?"
HELP_ERROR_REDIRECT = "Users are directed to this url upon a login error.  Override the default value for custom error handling."
HELP_STATE = "An immutable key used to differentiate projects."
HELP_CONNECTION_STATE = "An immutable key used to differentiate connections."
HELP_PUBCERT = "To generate a 2048-bit PEM-encoded public certificate for your project (with a 1-year validity period) run this command:<br>     openssl req -nodes -x509 -days 365 -newkey rsa:2048 -keyout private.pem -out public.crt<br>   This certificate is used to sign json web tokens."
HELP_DECRYPT_KEY_NAME = "Name of the 32 byte urlsave_64bencoded string generated using fernet.generate_key.<br>   This symetric key is used to encrypt data in transit.<br>  To rekey, delete the key and add a new one manually."
HELP_DECRYPT_KEY = "A 32 byte urlsave_64bencoded string generated using fernet.generate_key.<br>   This symetric key is used to encrypt data in transit."
HELP_QUERYPARAM = "If True the html query parameter ?access_token=token_value will be appended to the RETURN_TO url."
HELP_DISPLAY_ORDER = "Used to order the projects on the main screen.  Item 1 is top, left.  If order is identical to another project(s), alphabetic sub-sorting will be used."
HELP_ENABLED = "If True the project's tile will be available on the main screen."
HELP_EXPIRETOKENS = "If True this project's authorization tokens will be fetched (and expired) upon use, as it will be in production.  If False (the default state), tokens will never expire which is convenitent for development work."
HELP_ORGANIZATION = "Organization responsible for this project."
